buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = "https://repo.spongepowered.org/maven"}
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.1'
}
apply plugin: 'java-library'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

def directory = project.hasProperty("args")? project.file(project.getProperty("args")) : project.file(jar.destinationDir)
String mixinRefmap = project.ext.refmap.toString()
String mixinConfig = project.ext.mixinConfig.toString()
version = project.ext.fullVersion
archivesBaseName = "${project.ext.name}-Forge-${project.ext.fullVersion}.jar"
group = "${project.ext.group}"

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    refreshGradle
    //shadowRun
    //shadowImpl
    //shadowAPI
    implimentation.extendsFrom(shadowImpl)
    api.extendsFrom(shadowAPI)
    //shadowAPI.extendsFrom(api)
    runtime.extendsFrom(shadowRun)
}

repositories {
    flatDir { dirs '../libs' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.25'

    api fg.deobf('net.dirtcraft:DirtCommons-Forge:1.0.+') { changing = true }
    runtimeOnly fg.deobf('net.dirtcraft:LuckPerms-Forge:5.3.475-dev')
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    mappings channel: 'official', version: '1.16.5'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            //args("--mixin.config", mixinConfig)
            workingDirectory(project.file("run"))
            singleInstance(true)

            mods {
                "${modId}" {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            //args("--mixin.config", mixinConfig, "--nogui")
            workingDirectory(project.file("run"))
            singleInstance(true)

            mods {
                "${modId}" {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            args '--mod', modId, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${modId}" {
                    source sourceSets.main
                }
            }
        }
    }
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', "${mixinConfig}".toString()]
def intoTargets = ["$rootDir/forge/out/production/resources/", "$rootDir/forge/out/production/${project.name}.main/", "$rootDir/forge/bin/main/"]
def replaceProperties = [   version:        project.ext.fullVersion,
                            authors:        project.ext.authors,
                            description :   modDescription,
                            name   :        modName,
                            id     :        modId,
                            group  :        group,
                            refmap :        mixinRefmap]
processResources { //Thanks SizableShrimp#0755
    inputs.properties replaceProperties
    replaceProperties.put 'project', project
    filesMatching(resourceTargets) {
        expand replaceProperties
    }
    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

jar {
    destinationDir = directory
    archiveName = archivesBaseName
    manifest {
        attributes([
                "Specification-Title": project.ext.name,
                "Specification-Vendor": project.ext.vendor,
                "Specification-Version": "${project.ext.fullVersion}",
                "Implementation-Title": project.ext.name,
                "Implementation-Version": "${project.ext.fullVersion}",
                "Implementation-Vendor" : project.ext.vendor,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    destinationDir = directory
    configurations = [project.configurations.shadowImpl, project.configurations.shadowAPI, project.configurations.shadowRun]
    archiveName = archivesBaseName
    dependencies {

    }
}

task wrapper(type: Wrapper){
    gradleVersion = '7.1'
}

reobf {
    shadowJar { }
}

tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfShadowJar')
